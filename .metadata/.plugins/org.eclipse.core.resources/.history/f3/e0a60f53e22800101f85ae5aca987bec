package com.example.main.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.main.dto.LoginRequest;
import com.example.main.dto.LoginResponse;
import com.example.main.entity.User;
import com.example.main.repository.UserRepository;
import com.example.main.security.JwtUtil;
import com.example.main.service.UserService;

@RestController
@RequestMapping("/api/auth")
public class UserController {
	
	@Autowired
	private UserService userService;
	
	@Autowired
	private PasswordEncoder passwordEncoder;
	
	@Autowired
	private JwtUtil jwtUtil;
	
	@Autowired
	private UserRepository userRepository;
	
	@PostMapping("/register")
    public ResponseEntity<String> registerUser(@RequestBody User user) {
        String result = userService.registerUser(user);
        return new ResponseEntity<>(result, HttpStatus.CREATED);
    }
	
	@PostMapping("/login")
	public ResponseEntity<?> login(@RequestBody LoginRequest loginRequest) {
	    User user = userService.getUserByEmail(loginRequest.getEmail());

	    if (user != null && passwordEncoder.matches(loginRequest.getPassword(), user.getPassword())) {
	        String token = jwtUtil.generateToken(user.getEmail(), user.getRole());
	        return ResponseEntity.ok(new LoginResponse(token));
	    } else {
	        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid credentials");
	    }
	}

	@GetMapping("/api/user/exists/{email}")
	public ResponseEntity<Boolean> userExists(@PathVariable String email) {
	    boolean exists = userRepository.findByEmail(email).isPresent();
	    return ResponseEntity.ok(exists);
	}

	
	@PreAuthorize("hasRole('ADMIN')")
    @GetMapping("/users")
    public ResponseEntity<List<User>> getAllUsers() {
        return ResponseEntity.ok(userService.getAllUsers());
    }
}
