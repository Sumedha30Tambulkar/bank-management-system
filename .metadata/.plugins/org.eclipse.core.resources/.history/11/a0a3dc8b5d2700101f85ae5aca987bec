package com.account.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;

import com.account.client.UserClient;
import com.account.model.AccountRequest;
import com.account.model.AccountResponse;
import com.account.model.AccountUpdateRequest;
import com.account.security.JwtUtil;
import com.account.service.AccountService;

@RestController
@RequestMapping("api/account")
public class AccountController {

    @Autowired
    private AccountService accountService;
    
    @Autowired
    private JwtUtil jwtUtil;
    
    @Autowired
    private UserClient userClient;

    // ✅ Create Account – Uses email from JWT token
    @PostMapping("/create")
    public ResponseEntity<AccountResponse> create(
        @RequestHeader("Authorization") String token,
        @RequestBody AccountRequest request) {

        String email = jwtUtil.getEmailFromToken(token.substring(7)); // Remove "Bearer "

        // Optionally call user-service via Feign to verify user exists
        if (!userClient.userExistsByEmail(email)) {
            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, "User not registered");
        }

        AccountResponse response = accountService.createAccount(email, request);
        return ResponseEntity.ok(response);
    }


    // ✅ Get Balance – Only for logged-in user
    @GetMapping("/balance")
    public ResponseEntity<Double> getBalance(Authentication authentication) {
        String userEmail = authentication.getName();
        Double balance = accountService.getBalanceByEmail(userEmail);
        return ResponseEntity.ok(balance);
    }

    // ✅ Update balance – Debit or Credit
    @PutMapping("/update")
    public ResponseEntity<String> updateBalance(@RequestBody AccountUpdateRequest req, Authentication authentication) {
        String userEmail = authentication.getName();
        String result = accountService.updateBalance(userEmail, req.getAmount(), req.isCredit());
        return ResponseEntity.ok(result);
    }
}
