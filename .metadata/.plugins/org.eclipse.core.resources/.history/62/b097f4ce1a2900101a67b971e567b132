package com.account.service;

import java.time.LocalDateTime;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.web.server.ResponseStatusException;

import com.account.model.Account;
import com.account.model.AccountRequest;
import com.account.repository.AccountRepository;

@Service
public class AccountService {

    @Autowired
    private AccountRepository accountRepository;

    // Create account if not exists
    public Account createAccountOrThrow(AccountRequest request) {
        if (accountRepository.findByUserEmail(request.getUserEmail()).isPresent()) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Account already exists for user.");
        }

        if (request.getBalance() < 1000.0) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Minimum ₹1000 required to open an account.");
        }

        Account account = new Account();
        account.setUserEmail(request.getUserEmail());
        account.setAccountType(request.getAccountType());
        account.setBalance(request.getBalance());
        account.setCreatedAt(LocalDateTime.now());

        return accountRepository.save(account);
    }

    // Get latest balance by email
    public Double getBalanceByEmail(String userEmail) {
        Account account = accountRepository.findByUserEmail(userEmail)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Account not found"));
        return account.getBalance();
    }

    // Update balance with credit/debit
    public String updateBalance(String userEmail, double amount, boolean credit) {
        Account account = accountRepository.findByUserEmail(userEmail)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Account not found"));

        double newBalance = credit ? account.getBalance() + amount : account.getBalance() - amount;

        if (!credit && newBalance < 0) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Insufficient balance for debit transaction.");
        }

        account.setBalance(newBalance);
        accountRepository.save(account);
        return "Balance " + (credit ? "credited" : "debited") + " successfully. New balance: ₹" + newBalance;
    }
}
