package com.account.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.web.server.ResponseStatusException;

import com.account.model.Account;
import com.account.model.AccountRequest;
import com.account.model.AccountResponse;
import com.account.repository.AccountRepository;

@Service
public class AccountService {

    @Autowired
    private AccountRepository accountRepository;

    // ✅ Create account only if user doesn't already have one
    public AccountResponse createAccount(AccountRequest request) {
        if (request.getBalance() < 1000.0) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Minimum ₹1000 required.");
        }

        // ✅ Check for existing account
        if (accountRepository.findByUserEmail(request.getUserEmail()).isPresent()) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "User already has an account.");
        }

        // ✅ Create and save account
        Account account = new Account(request.getAccountType(), request.getBalance());
        Account saved = accountRepository.save(account);
        return mapToResponse(saved);
    }

    public Double getBalanceByEmail(String userEmail) {
        Account account = accountRepository.findByUserEmail(userEmail)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "No account found for user."));
        return account.getBalance();
    }

    public String updateBalance(String userEmail, double amount, boolean credit) {
        Account account = accountRepository.findByUserEmail(userEmail)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "No account found for user."));

        double newBalance = credit ? account.getBalance() + amount : account.getBalance() - amount;

        if (!credit && newBalance < 0) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Insufficient balance.");
        }

        account.setBalance(newBalance);
        accountRepository.save(account);
        return "Balance updated successfully.";
    }

    private AccountResponse mapToResponse(Account account) {
        AccountResponse dto = new AccountResponse();
        dto.setAccountId(account.getAccountId());
        dto.setUserEmail(account.getUserEmail());
        dto.setAccountType(account.getAccountType());
        dto.setBalance(account.getBalance());
        dto.setCreatedAt(account.getCreatedAt());
        return dto;
    }
}
