package com.account.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;

import com.account.client.UserClient;
import com.account.model.AccountRequest;
import com.account.model.AccountResponse;
import com.account.model.AccountUpdateRequest;
import com.account.service.AccountService;

@RestController
@RequestMapping("api/account")
public class AccountController {

    @Autowired
    private AccountService accountService;

    @Autowired
    private UserClient userClient;

    // ✅ Create Account – email extracted from token via Authentication
    @PostMapping("/create")
    public ResponseEntity<AccountResponse> create(
        @RequestBody AccountRequest request,
        Authentication authentication) {

        String userEmail = authentication.getName(); // extracted automatically from JWT

        // Optional user check using Feign
        if (!userClient.userExistsByEmail(userEmail)) {
            return ResponseEntity.status(401).build();
        }

        // Inject email into the request
        request.setUserEmail(userEmail);

        AccountResponse response = accountService.createAccount(request);
        return ResponseEntity.ok(response);
    }

    // ✅ Get Balance
    @GetMapping("/balance")
    public ResponseEntity<Double> getBalance(Authentication authentication) {
        String userEmail = authentication.getName();
        Double balance = accountService.getBalanceByEmail(userEmail);
        return ResponseEntity.ok(balance);
    }

    // ✅ Update balance
    @PutMapping("/update")
    public ResponseEntity<String> updateBalance(
        @RequestBody AccountUpdateRequest req,
        Authentication authentication) {

        String userEmail = authentication.getName();
        String result = accountService.updateBalance(userEmail, req.getAmount(), req.isCredit());
        return ResponseEntity.ok(result);
    }
}
